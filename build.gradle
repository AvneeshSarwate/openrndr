import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.4.30"
        classpath "com.netflix.nebula:nebula-publishing-plugin:17.3.0"
        classpath "com.netflix.nebula:nebula-release-plugin:15.1.0"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
}

apply plugin: 'org.jetbrains.dokka'

project.ext {
    lwjglVersion = '3.2.3'
    javacpp_version = '1.5.5'
    ffmpeg_version = "4.3.2-$javacpp_version"
    kotlinVersion = '1.4.32'
    spekVersion = '2.0.15'
    jsoupVersion = '1.13.1'
}

tasks.named("dokkaHtml")  {
    moduleName.set("openrndr")
    dokkaSourceSets {

        named("main") { /* configure main source set */
            perPackageOption {
                matchingRegex.set(".*gl3.*") // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                suppress.set(true)
            }
            perPackageOption {
                matchingRegex.set(".*internal*") // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                suppress.set(true)
            }
            perPackageOption {
                matchingRegex.set(".*artifex*") // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                suppress.set(true)
            }
            perPackageOption {
                matchingRegex.set("io\\.lacuna.*") // will match kotlin and all sub-packages of it
                // All options are optional, default values are below:
                suppress.set(true)
            }
        }
    }
    outputDirectory.set(file("build/docs"))
    includeNonPublic.set(false)
    reportUndocumented.set(true)
    skipEmptyPackages.set(true)
    remoteUrl.set(uri("https://github.com/openrndr/openrndr/master/src/main/kotlin").toURL())
}

["openrndr-animatable", "openrndr-dialogs", "openrndr-filter", "openrndr-core", "openrndr-math", "openrndr-color", "openrndr-event"].each {

    project(":$it") {
        apply plugin: 'org.jetbrains.dokka'
    }
}


allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'kotlin'

    group 'org.openrndr'

    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/spekframework/spek"
        }
    }

    dependencies {
        implementation 'io.github.microutils:kotlin-logging-jvm:2.0.4'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

        testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
        testImplementation "org.amshove.kluent:kluent:1.65"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
        testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    }

    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    javadoc {
        options.addBooleanOption 'Xdoclint:none', true
    }
}

configure(allprojects.findAll { it.name != "openrndr-demos" }) {
    apply plugin: 'nebula.contacts'

    // -- work-around for problem with nebula.info on arm64, which is currently not used a build host platform
    def arch = new DefaultNativePlatform("current").architecture.name
    if (arch != 'aarch64') {
        apply plugin: 'nebula.info'
    }
//    apply plugin: 'nebula.dependency-lock'

    apply plugin: 'nebula.release'
    // selectively apply only the bintray plugin, snapshots are not published
    // nebula-bintray needs to happened after nebula-release since version isn't lazy in the bintray extension

    apply plugin: 'nebula.maven-publish'
    apply plugin: 'nebula.source-jar'
    apply plugin: 'nebula.javadoc-jar'

    contacts {
        'edwin@openrndr.org' {
            moniker 'Edwin Jakobs'
            github 'edwinRNDR'
        }
    }
}

configure(subprojects) {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

