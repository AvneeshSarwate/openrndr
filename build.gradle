import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.1"
        classpath "com.netflix.nebula:nebula-kotlin-plugin:1.3.70"
        classpath "com.netflix.nebula:nebula-publishing-plugin:17.2.1"
        classpath "com.netflix.nebula:nebula-release-plugin:14.1.0"
        classpath "com.netflix.nebula:nebula-bintray-plugin:8.3.0"
    }
}


apply plugin: 'org.jetbrains.dokka'

project.ext {
    lwjglVersion = '3.2.3'
    ffmpeg_version = '4.2.2-1.5.3'
    kotlinVersion = '1.3.72'
    spekVersion = '2.0.10'
    jsoupVersion = '1.13.1'
}



dokka {
//
    outputDirectory = "$buildDir/docs"
    outputFormat = "html"
//    includes = ['Module.md']


    configuration {
        moduleName = "$rootProject.name"
        platform = "JVM"
        skipDeprecated = true
        includeNonPublic = false

        disableAutoconfiguration = false

        subProjects = ["openrndr-animatable", "openrndr-color", "openrndr-core", "openrndr-dialogs","openrndr-event",
                       "openrndr-extensions", "openrndr-filter", "openrndr-math", "openrndr-shape", "openrndr-svg"]

        sourceLink {
            url = "https://github.com/openrndr/openrndr/blob/master/openrndr-core/src/main/kotlin"
            lineSuffix = "#L"
        }
        perPackageOption {
            prefix = "org.openrndr.internal"
            suppress = true
        }
        perPackageOption {
            prefix = "org.openrndr.shape.tessellation"
            suppress = true
        }
    }


    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        doLast {
            exec {
                executable "./dokka/postbuild.sh"
            }
        }
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'nebula.kotlin'
    apply plugin: 'nebula.contacts'

    // -- work-around for problem with nebula.info on arm64, which is currently not used a build host platform
    def arch = new DefaultNativePlatform("current").architecture.name
    if (arch != 'aarch64') {
        apply plugin: 'nebula.info'
    }
//    apply plugin: 'nebula.dependency-lock'

    apply plugin: 'nebula.release'
    // selectively apply only the bintray plugin, snapshots are not published
    // nebula-bintray needs to happened after nebula-release since version isn't lazy in the bintray extension

    apply plugin: 'nebula.maven-publish'
    apply plugin: 'nebula.source-jar'
    apply plugin: 'nebula.javadoc-jar'
    apply plugin: 'nebula.nebula-bintray-publishing'

    group 'org.openrndr'

    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/spekframework/spek"
        }
    }

    dependencies {
        implementation 'io.github.microutils:kotlin-logging:1.7.9'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.5'

        testImplementation "org.spekframework.spek2:spek-dsl-jvm:$spekVersion"
        testImplementation "org.amshove.kluent:kluent:1.61"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
        testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:$spekVersion"
        testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    }

    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }


    javadoc {
        options.addBooleanOption 'Xdoclint:none', true
    }



    /*
    if (System.getenv('TRAVIS') == null) {
        task runJupiter(type: JavaExec) {
            if (System.properties['os.name'].toLowerCase().contains('mac')) {
               jvmArgs '-XstartOnFirstThread'
            }
            classpath = project.sourceSets.test.runtimeClasspath
            main 'org.junit.platform.console.ConsoleLauncher'
            args '--scan-class-path'
            args "--reports-dir=$project.testReportDir"
        }
        test.dependsOn runJupiter
    }*/

    contacts {
        'edwin@openrndr.org' {
            moniker 'Edwin Jakobs'
            github 'edwinRNDR'
        }
    }

    bintray {
        user = findProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
        apiKey = findProperty('bintrayKey') ?: System.getenv('BINTRAY_KEY')
        userOrg = 'openrndr'
        repo = 'openrndr'
        pkgName = 'openrndr'
        gppSign = false
        syncToMavenCentral = false
        licenses = ['BSD-2-Clause']
        vcsUrl = 'https://github.com/openrndr/openrndr.git'
        websiteUrl = 'https://openrndr.org'
        issueTrackerUrl = 'https://github.com/openrndr/openrndr/issues'
        labels = ['creative-coding', 'realtime-rendering', 'opengl']
    }
}

configure(subprojects) {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

