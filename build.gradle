buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

plugins {
  // plugin dependencies, load without applying them
  id 'nebula.kotlin' version '1.3.11' apply false
  id 'com.jfrog.artifactory' version '4.6.2' apply false

  id 'nebula.contacts' version '4.1.1' apply false
  id 'nebula.info' version '4.0.2' apply false
  id 'nebula.dependency-lock' version '6.1.2' apply false
  id 'nebula.facet' version '5.1.2' apply false
  id 'nebula.maven-apache-license' version '9.0.2' apply false

  id 'nebula.maven-publish' version '9.0.2' apply false
  id 'nebula.release' version '8.0.3' apply false
  id 'nebula.nebula-bintray' version '4.0.2' apply false
  id 'nebula.source-jar' version '9.0.2' apply false
}

apply plugin: 'org.jetbrains.dokka'

project.ext {
    lwjglVersion = '3.2.1'
}

dokka {
    moduleName = "$rootProject.name"
    outputDirectory = "$buildDir/docs"
    outputFormat = "html"
    includes = ['Module.md']
    
    sourceDirs = files(subprojects.collect { p -> new File(p.projectDir, "/src/main/kotlin") })
    if (!System.properties['os.name'].toLowerCase().contains('windows')) {
        doLast {
            exec {
                executable "./dokka/postbuild.sh"
            }
        }
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'nebula.kotlin'
    apply plugin: 'nebula.contacts'
    apply plugin: 'nebula.info'
    apply plugin: 'nebula.dependency-lock'
    apply plugin: 'nebula.facet'
    apply plugin: 'nebula.maven-apache-license'
    apply plugin: 'nebula.release'
    apply plugin: 'nebula.maven-publish'

    // selectively apply only the bintray plugin, snapshots are not published
    // nebula-bintray needs to happened after nebula-release since version isn't lazy in the bintray extension
    apply plugin: 'nebula.nebula-bintray-publishing'
    apply plugin: 'nebula.source-jar'

    group 'org.openrndr'

    repositories {
        jcenter()
    }

    dependencies {
        implementation 'io.github.microutils:kotlin-logging:1.6.22'
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'

        testImplementation "org.jetbrains.kotlin:kotlin-reflect:1.3.11"
        testImplementation 'org.jetbrains.spek:spek-api:1.2.1'
        testImplementation 'org.amshove.kluent:kluent:1.46'
        testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.2.1'
        //testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
        testRuntime 'org.junit.platform:junit-platform-console:1.2.0'
    }

    test {
        // enable JUnit Platform (a.k.a. JUnit 5) support
        // works together with the two testRuntime dependencies (spek engine & jupiter engine)
        //useJUnitPlatform()
    }


    if (System.getenv('TRAVIS') == null) {
        task runJupiter(type: JavaExec) {
            if (System.properties['os.name'].toLowerCase().contains('mac')) {
               jvmArgs '-XstartOnFirstThread'
            }
            classpath = project.sourceSets.test.runtimeClasspath
            main 'org.junit.platform.console.ConsoleLauncher'
            args '--scan-class-path'
            args "--reports-dir=$project.testReportDir"
        }
        test.dependsOn runJupiter
    }

    contacts {
        'edwin@openrndr.org' {
            moniker 'Edwin Jakobs'
            github 'edwinRNDR'
        }
    }

    bintray {
        pkg {
            userOrg = 'openrndr'
            repo = 'openrndr'
            name = 'openrndr'
            desc = project.description
            licenses = ['BSD-2-Clause']
            vcsUrl = 'https://github.com/openrndr/openrndr.git'
            websiteUrl = 'https://www.openrndr.org'
            issueTrackerUrl = 'https://github.com/openrndr/openrndr/issues'
            labels = ['creative-coding', 'realtime-rendering', 'opengl']
        }
    }
}

configure(subprojects)  {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi"]
    }
}

